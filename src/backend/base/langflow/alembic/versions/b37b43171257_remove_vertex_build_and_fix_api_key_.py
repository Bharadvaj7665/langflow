"""remove vertex_build and fix api key table


Revision ID: b37b43171257
Revises: 1eab2c3eb45e
Create Date: 2024-11-18 15:00:08.238300

"""
from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import sqlite
from sqlalchemy.engine.reflection import Inspector

from langflow.utils import migration

# revision identifiers, used by Alembic.
revision: str = 'b37b43171257'
down_revision: Union[str, None] = '1eab2c3eb45e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)  # type: ignore
    # ### commands auto generated by Alembic - please adjust! ###
    if migration.table_exists(name="vertex_build", conn=conn):
        op.drop_table('vertex_build')
    if migration.table_exists(name="apikey", conn=conn) and migration.column_exists(table_name="apikey", column_name="name", conn=conn):
        columns = inspector.get_columns("apikey")
        name_column = next((column for column in columns if column["name"] == "name"), None)
        if name_column is not None and isinstance(name_column["type"], sa.VARCHAR) and not name_column["nullable"]:
            with op.batch_alter_table('apikey', schema=None) as batch_op:
                batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=True)

    # ### end Alembic commands ###


def downgrade() -> None:
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)  # type: ignore
    # ### commands auto generated by Alembic - please adjust! ###
    if migration.table_exists(name="apikey", conn=conn) and migration.column_exists(table_name="apikey", column_name="name", conn=conn):
        columns = inspector.get_columns("apikey")
        name_column = next((column for column in columns if column["name"] == "name"), None)
        if name_column is not None and isinstance(name_column["type"], sa.VARCHAR) and name_column["nullable"]:
            with op.batch_alter_table('apikey', schema=None) as batch_op:
                batch_op.alter_column('name',
               existing_type=sa.VARCHAR(),
               nullable=False)

    if not migration.table_exists(name="vertex_build", conn=conn):
        op.create_table('vertex_build',
        sa.Column('timestamp', sa.DATETIME(), nullable=False),
        sa.Column('id', sa.VARCHAR(), nullable=False),
        sa.Column('data', sqlite.JSON(), nullable=True),
            sa.Column('artifacts', sqlite.JSON(), nullable=True),
            sa.Column('params', sa.TEXT(), nullable=True),
            sa.Column('valid', sa.BOOLEAN(), nullable=False),
            sa.Column('flow_id', sa.CHAR(length=32), nullable=False),
            sa.Column('build_id', sa.CHAR(length=32), nullable=False),
            sa.ForeignKeyConstraint(['flow_id'], ['flow.id'], ),
            sa.PrimaryKeyConstraint('build_id')
        )
    # ### end Alembic commands ###
