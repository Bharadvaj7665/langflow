import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import RenderInputParameters from "../RenderInputParameters";

interface NodeDialogProps {
  open: boolean;
  onClose: () => void;
  content: React.ReactNode;
  dialogInputs?: any[];
}

export const NodeDialog: React.FC<NodeDialogProps> = ({
  open,
  onClose,
  content,
  dialogInputs,
}) => {
  const mockData = {
    node: {
      template: {
        _type: "Component",
        collection_name: {
          tool_mode: false,
          trace_as_metadata: true,
          options: ["test"],
          options_metadata: [
            {
              records: 0,
              provider: "nvidia",
              icon: "",
              model: "NV-Embed-QA",
            },
          ],
          combobox: false,
          dialog_inputs: [
            {
              title: "Create New Collection",
              description: "Create a new collection in Astra DB.",
              status: "",
              dimensions: 0,
              model: "",
              similarity_metrics: [],
              icon: "Collection",
            },
          ],
          required: true,
          placeholder: "",
          show: true,
          name: "collection_name",
          value: "test",
          display_name: "Collection",
          advanced: false,
          dynamic: false,
          info: "The name of the collection within Astra DB where the vectors will be stored.",
          real_time_refresh: true,
          refresh_button: true,
          title_case: false,
          type: "str",
          _input_type: "DropdownInput",
          load_from_db: false,
        },

        database_name: {
          tool_mode: false,
          trace_as_metadata: false,
          options: ["athena"],
          options_metadata: [
            {
              collections: 1,
            },
          ],
          combobox: false,
          dialog_inputs: [
            {
              title: "Create New Database",
              description: "Create a new database in Astra DB.",
              db_names: [],
              status: "",
              collection_count: 0,
              record_count: 0,
            },
          ],
          required: true,
          placeholder: "",
          show: true,
          name: "database_name",
          value: "athena",
          display_name: "Database",
          advanced: false,
          dynamic: false,
          info: "Select a database in Astra DB.",
          real_time_refresh: true,
          refresh_button: true,
          title_case: false,
          type: "str",
          _input_type: "DropdownInput",
          load_from_db: false,
        },
        search_query: {
          tool_mode: false,
          trace_as_input: false,
          multiline: true,
          trace_as_metadata: false,
          load_from_db: false,
          list: false,
          required: false,
          placeholder: "",
          show: true,
          name: "search_query",
          value: "",
          display_name: "Search Query",
          advanced: false,
          dynamic: false,
          info: "",
          title_case: false,
          type: "str",
          _input_type: "MultilineInput",
        },
        token: {
          load_from_db: false,
          required: true,
          placeholder: "",
          show: true,
          name: "token",
          value: "ASTRA_DB_APPLICATION_TOKEN",
          display_name: "Astra DB Application Token",
          advanced: false,
          dynamic: false,
          info: "Authentication token for accessing Astra DB.",
          real_time_refresh: false,
          title_case: false,
          password: true,
          type: "str",
          _input_type: "SecretStrInput",
        },
      },
      description: "Ingest and search documents in Astra DB",
      icon: "AstraDB",
      base_classes: ["Data"],
      display_name: "Astra DB",
      documentation:
        "https://docs.datastax.com/en/langflow/astra-components.html",
      minimized: false,
      custom_fields: {},
      output_types: [],
      pinned: false,
      conditional_paths: [],
      frozen: false,
      outputs: [
        {
          types: ["Data"],
          selected: "Data",
          name: "search_results",
          hidden: null,
          display_name: "Search Results",
          method: "search_documents",
          value: "__UNDEFINED__",
          cache: true,
          required_inputs: ["collection_name", "database_name", "token"],
        },
      ],
      field_order: [
        "token",
        "api_endpoint",
        "environment",
        "database_name",
        "collection_name",
        "keyspace",
        "search_query",
        "number_of_results",
        "search_type",
        "search_score_threshold",
        "advanced_search_filter",
        "content_field",
        "deletion_field",
        "ignore_invalid_documents",
        "astradb_vectorstore_kwargs",
      ],
      beta: false,
      legacy: false,
      edited: false,
      metadata: {},
    },
    showNode: true,
    type: "AstraDB",
    id: "AstraDB-7xUbP",
    description: "Ingest and search documents in Astra DB",
    display_name: "Astra DB",
  };

  const mockShownOutputs = [
    {
      types: ["Data"],
      selected: "Data",
      name: "search_results",
      hidden: null,
      display_name: "Search Results",
      method: "search_documents",
      value: "__UNDEFINED__",
      cache: true,
      required_inputs: ["collection_name", "database_name", "token"],
    },
  ];

  const mockTypes = {
    ChatInput: "inputs",
    Message: "crewai",
    TextInput: "inputs",
    GitLoaderComponent: "git",
    Data: "cohere",
    LangWatchEvaluator: "langwatch",
    CassandraChatMemory: "memories",
    Memory: "helpers",
    AstraDBChatMemory: "memories",
    ZepChatMemory: "memories",
    RedisChatMemory: "memories",
    mem0_chat_memory: "memories",
    StructuredOutput: "helpers",
    IDGenerator: "helpers",
    CreateList: "helpers",
    StoreMessage: "helpers",
    OutputParser: "helpers",
    BatchRunComponent: "helpers",
    DataFrame: "processing",
    CurrentDate: "helpers",
    ChatOutput: "outputs",
    TextOutput: "outputs",
    SQLExecutor: "data",
    object: "retrievers",
    str: "data",
    Text: "google",
    JSONtoData: "data",
    Webhook: "data",
    APIRequest: "data",
    URL: "data",
    File: "data",
    Directory: "data",
    CSVtoData: "data",
    ComposioAPI: "composio",
    Tool: "tools",
    Unstructured: "unstructured",
    Prompt: "prompts",
    AssemblyAIListTranscripts: "assemblyai",
    AssemblyAILeMUR: "assemblyai",
    AssemblyAIGetSubtitles: "assemblyai",
    AssemblyAITranscriptionJobCreator: "assemblyai",
    AssemblyAITranscriptionJobPoller: "assemblyai",
    Confluence: "confluence",
    "Combinatorial Reasoner": "icosacomputing",
    PythonFunction: "prototypes",
    Callable: "prototypes",
    CustomComponent: "custom_component",
    NvidiaRerankComponent: "nvidia",
    Retriever: "cohere",
    AssistantsRun: "astra_assistants",
    AssistantsCreateAssistant: "astra_assistants",
    AstraAssistantManager: "astra_assistants",
    Dotenv: "astra_assistants",
    AssistantsListAssistants: "astra_assistants",
    AssistantsGetAssistantName: "astra_assistants",
    GetEnvVar: "astra_assistants",
    AssistantsCreateThread: "astra_assistants",
    Cassandra: "vectorstores",
    VectaraRAG: "vectorstores",
    Elasticsearch: "vectorstores",
    CassandraGraph: "vectorstores",
    Milvus: "vectorstores",
    Clickhouse: "vectorstores",
    Pinecone: "vectorstores",
    OpenSearch: "vectorstores",
    SupabaseVectorStore: "vectorstores",
    QdrantVectorStoreComponent: "vectorstores",
    AstraDB: "vectorstores",
    MongoDBAtlasVector: "vectorstores",
    FAISS: "vectorstores",
    pgvector: "vectorstores",
    Redis: "vectorstores",
    Vectara: "vectorstores",
    Weaviate: "vectorstores",
    AstraDBGraph: "vectorstores",
    HCD: "vectorstores",
    VectaraSelfQueryRetriver: "vectorstores",
    Chroma: "vectorstores",
    Upstash: "vectorstores",
    Couchbase: "vectorstores",
    NotionPageContent: "Notion",
    NotionPageUpdate: "Notion",
    AddContentToPage: "Notion",
    NotionListPages: "Notion",
    NotionPageCreator: "Notion",
    NotionDatabaseProperties: "Notion",
    NotionSearch: "Notion",
    NotionUserList: "Notion",
    NotDiamond: "notdiamond",
    VertexAiModel: "models",
    LanguageModel: "models",
    BaiduQianfanChatModel: "models",
    Maritalk: "models",
    NVIDIAModelComponent: "models",
    AmazonBedrockModel: "models",
    MistralModel: "models",
    SambaNovaModel: "models",
    OpenRouterComponent: "models",
    AIMLModel: "models",
    PerplexityModel: "models",
    GoogleGenerativeAIModel: "models",
    GroqModel: "models",
    OpenAIModel: "models",
    AzureOpenAIModel: "models",
    LMStudioModel: "models",
    HuggingFaceModel: "models",
    AnthropicModel: "models",
    CohereModel: "models",
    OllamaModel: "models",
    Agent: "crewai",
    FlowTool: "logic",
    SubFlow: "logic",
    DataConditionalRouter: "logic",
    Notify: "logic",
    ConditionalRouter: "logic",
    RunFlow: "logic",
    Listen: "logic",
    Pass: "logic",
    GoogleDriveSearchComponent: "google",
    GmailLoaderComponent: "google",
    GoogleOAuthToken: "google",
    GoogleDriveComponent: "google",
    FirecrawlCrawlApi: "firecrawl",
    FirecrawlScrapeApi: "firecrawl",
    AgentQL: "agentql",
    UpdateData: "processing",
    CombineText: "processing",
    AlterMetadata: "processing",
    ParseJSONData: "processing",
    JSONCleaner: "processing",
    SplitText: "processing",
    MergeDataComponent: "processing",
    ExtractaKey: "processing",
    FilterData: "processing",
    SelectData: "processing",
    DataFrameOperationsComponent: "processing",
    ParseData: "processing",
    CreateData: "processing",
    MessagetoData: "processing",
    FilterDataValues: "processing",
    LanguageRecursiveTextSplitter: "langchain_utilities",
    LLMMathChain: "langchain_utilities",
    VectorStoreRetriever: "langchain_utilities",
    BaseRetriever: "retrievers",
    Generic: "retrievers",
    Runnable: "retrievers",
    RunnableSerializable: "retrievers",
    "RunnableSerializable[str, list[Document]]": "retrievers",
    Serializable: "retrievers",
    ConversationChain: "langchain_utilities",
    OpenAPIAgent: "langchain_utilities",
    AgentExecutor: "langchain_utilities",
    RetrievalQA: "langchain_utilities",
    NaturalLanguageTextSplitter: "langchain_utilities",
    RetrieverTool: "langchain_utilities",
    BaseTool: "langchain_utilities",
    "RunnableSerializable[Union[str, dict, ToolCall], Any]":
      "langchain_utilities",
    OpenAIToolsAgent: "langchain_utilities",
    SQLGenerator: "langchain_utilities",
    LLMCheckerChain: "langchain_utilities",
    XMLAgent: "langchain_utilities",
    SelfQueryRetriever: "langchain_utilities",
    HtmlLinkExtractor: "langchain_utilities",
    SQLDatabase: "langchain_utilities",
    VectorStoreInfo: "langchain_utilities",
    VectorStoreRouterAgent: "langchain_utilities",
    RunnableExecutor: "langchain_utilities",
    SemanticTextSplitter: "langchain_utilities",
    CSVAgent: "langchain_utilities",
    CharacterTextSplitter: "langchain_utilities",
    SQLAgent: "langchain_utilities",
    RecursiveCharacterTextSplitter: "langchain_utilities",
    LangChainFakeEmbeddings: "langchain_utilities",
    Embeddings: "embeddings",
    JsonAgent: "langchain_utilities",
    SpiderTool: "langchain_utilities",
    JSONDocumentBuilder: "langchain_utilities",
    BaseMedia: "langchain_utilities",
    Document: "langchain_utilities",
    ToolCallingAgent: "langchain_utilities",
    "LangChain Hub Prompt": "langchain_utilities",
    VertexAIEmbeddings: "embeddings",
    HuggingFaceInferenceAPIEmbeddings: "embeddings",
    NVIDIAEmbeddingsComponent: "embeddings",
    AmazonBedrockEmbeddings: "embeddings",
    MistalAIEmbeddings: "embeddings",
    EmbeddingSimilarityComponent: "embeddings",
    AIMLEmbeddings: "embeddings",
    CloudflareWorkersAIEmbeddings: "embeddings",
    AstraVectorize: "embeddings",
    dict: "embeddings",
    "Google Generative AI Embeddings": "embeddings",
    OpenAIEmbeddings: "embeddings",
    LMStudioEmbeddingsComponent: "embeddings",
    AzureOpenAIEmbeddings: "embeddings",
    TextEmbedderComponent: "embeddings",
    CohereEmbeddings: "embeddings",
    OllamaEmbeddings: "embeddings",
    needle: "needle",
    GleanAPI: "tools",
    AstraDBCQLToolComponent: "tools",
    StructuredTool: "tools",
    BingSearchAPI: "tools",
    GoogleSearchAPI: "tools",
    GoogleSerperAPI: "tools",
    PythonCodeStructuredTool: "tools",
    WikipediaAPI: "tools",
    AstraDBToolComponent: "tools",
    SearXNGTool: "tools",
    ExaSearch: "tools",
    MCPStdio: "tools",
    WolframAlphaAPI: "tools",
    YouTubeTranscripts: "tools",
    TavilyAISearch: "tools",
    CalculatorTool: "tools",
    WikidataAPI: "tools",
    PythonREPLTool: "tools",
    YahooFinanceTool: "tools",
    SearchAPI: "tools",
    DuckDuckGoSearch: "tools",
    SerpAPI: "tools",
    MCPSse: "tools",
    AmazonKendra: "retrievers",
    MetalRetriever: "retrievers",
    MultiQueryRetriever: "retrievers",
    SequentialTaskComponent: "crewai",
    SequentialTask: "crewai",
    CrewAIAgentComponent: "crewai",
    HierarchicalCrewComponent: "crewai",
    SequentialCrewComponent: "crewai",
    HierarchicalTaskComponent: "crewai",
    HierarchicalTask: "crewai",
    SequentialTaskAgentComponent: "crewai",
    CohereRerank: "cohere",
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-[700px] gap-2 px-1 py-6">
        {dialogInputs?.map((input) => (
          <DialogHeader key={input.title} className="px-5 pb-3">
            <DialogTitle>
              <div className="flex items-center">
                <span className="pb-2">{input.title}</span>
              </div>
            </DialogTitle>
            <DialogDescription>
              <div className="flex items-center gap-2">{input.description}</div>
            </DialogDescription>
          </DialogHeader>
        ))}

        <RenderInputParameters
          data={mockData}
          types={mockTypes}
          isToolMode={false}
          showNode={true}
          shownOutputs={mockShownOutputs}
          showHiddenOutputs={false}
        />

        <DialogFooter className="px-5 pt-3">
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button onClick={() => alert("Add Logic for save")}>Save</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default NodeDialog;
